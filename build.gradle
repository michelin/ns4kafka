plugins {
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.0"
    id("jacoco")
    id("org.sonarqube") version "5.1.0.4882"
    id("pl.allegro.tech.build.axion-release") version "1.18.0"
    id("checkstyle")
}

version = scmVersion.version
group = "com.michelin.ns4kafka"

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.validation:micronaut-validation-processor")

    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.kafka:micronaut-kafka")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-ldap")
    implementation("io.micronaut.openapi:micronaut-openapi")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("jakarta.validation:jakarta.validation-api")
    implementation('io.confluent:kafka-schema-registry-client:7.6.0')


    compileOnly("org.projectlombok:lombok")
    compileOnly("com.google.code.findbugs:jsr305") // https://github.com/micronaut-projects/micronaut-core/pull/5691

    runtimeOnly("ch.qos.logback:logback-classic")

    testImplementation("org.mockito:mockito-core")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.testcontainers:kafka")
    testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")
    testImplementation("org.junit.jupiter:junit-jupiter-params:5.10.3")
    testImplementation("io.projectreactor:reactor-test")

    testAnnotationProcessor("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
}

application {
    mainClass.set("com.michelin.ns4kafka.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion('21')
    targetCompatibility = JavaVersion.toVersion('21')
}

run {
    // environment("MICRONAUT_ENVIRONMENTS", "dev")
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.michelin.ns4kafka.*")
    }
}

shadowJar {
    archiveClassifier.set('')
    dependsOn(distTar, distZip)
}

dockerfile {
    baseImage = "eclipse-temurin:21-jre-alpine"
}

if (project.hasProperty("releaseLatest")) {
    dockerBuild {
        images.set(["michelin/ns4kafka:" + version, "michelin/ns4kafka:latest"])
    }
} else {
    dockerBuild {
        images.set(["michelin/ns4kafka:" + version])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true'
}

sonarqube {
    properties {
        property "sonar.projectKey", "michelin_ns4kafka"
        property "sonar.organization", "michelin"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
    }
}

test {
    reports {
        html.required = false
    }
}

checkstyle {
    toolVersion = '10.12.3'
    configFile = file(".checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
}

